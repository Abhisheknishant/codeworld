# https://docs.haskellstack.org/en/stable/travis_ci/

sudo: enabled
dist: bionic
language: generic
cache:
  timeout: 2000
  directories:
  - $HOME/.cabal
  # - $HOME/.ghc
  # - $HOME/.ghcjs
  - $HOME/.local/bin
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/.stack-work
  # - $TRAVIS_BUILD_DIR/ghcjs/.cabal-sandbox
  # - $TRAVIS_BUILD_DIR/ghcjs/data
  # - $TRAVIS_BUILD_DIR/ghcjs/dist
  # - $TRAVIS_BUILD_DIR/ghcjs/dist-newstyle
  # - $TRAVIS_BUILD_DIR/ghcjs/ghcjs-boot
  # - $TRAVIS_BUILD_DIR/ghcjs/lib
  # - $TRAVIS_BUILD_DIR/ghcjs/lib/boot/data
  # - $TRAVIS_BUILD_DIR/ghcjs/lib/boot/pkg
  # - $TRAVIS_BUILD_DIR/ghcjs/utils
  # - $TRAVIS_BUILD_DIR/ghcjs/vendor

addons:
  apt:
    update: false

# `stages` apparently has no effect when `jobs` defined
# stages:
#   - upgrade_stack
#   - build_some_dependencies
#   - build_dependencies
#   - build
#   - test
#   - build_ghcjs_dependencies
#   - build_ghcjs
#   - install_ghcjs
#   - boot_ghcjs
#   - build_with_ghcjs_dependencies
#   - build_with_ghcjs
#   - test_with_ghcjs

jobs:
  include:
    - stage: upgrade_stack
      name: "Upgrade Stack"
      name: "root"
      env:
        - PACKAGE="."
        - JOB=1
      script: &upgrade_stack
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export DIR=~/.local/bin
        - if [ ! -d "$DIR" ]; then mkdir -p ~/.local/bin; fi
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - stack --version
        - travis_retry eval $"stack install --resolver lts-14.11 happy-1.19.9 alex-3.2.4 ; sleep 10"
    - stage: upgrade_stack
      name: "Account"
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "API"
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Auth"
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Base (with ghcjs-base-stub)"
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Compiler"
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Error Sanitizer"
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Game API"
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Game Server"
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Prediction"
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Server"
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Funblocks Client (with ghcjs-base-stub)"
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *upgrade_stack
    - stage: build_some_dependencies
      name: "Build some dependencies"
      name: "root"
      env:
        - PACKAGE="."
        - JOB=1
      script: &build_some_dependencies
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - |
          travis_wait 30 stack build --fast \
            base-compat \
            base-compat-batteries \
            basement \
            cereal \
            colour \
            cryptonite \
            hashable \
            haskell-src-exts \
            lens \
            transformers \
            network \
            old-time \
            sqlite-simple
        - sudo fallocate -l 4G /swapfile
        - sudo chmod 600 /swapfile
        - sudo mkswap /swapfile
        - sudo swapon /swapfile
        - sudo sysctl vm.swappiness=90
        - travis_wait 30 stack build -j1 --fast jsaddle-dom
        - sudo swapoff -a
    - stage: build_some_dependencies
      name: "Account"
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "API"
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Auth"
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Base (with ghcjs-base-stub)"
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Compiler"
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Error Sanitizer"
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Game API"
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Game Server"
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Prediction"
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Server"
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Funblocks Client (with ghcjs-base-stub)"
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *build_some_dependencies
    - stage: build_dependencies
      name: "Build dependencies"
      name: "root"
      env:
        - PACKAGE="."
        - JOB=1
      script: &build_dependencies
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10" # - stack clean --full
        - travis_wait 30 stack build --fast --dependencies-only
    - stage: build_dependencies
      name: "Account"
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *build_dependencies
    - stage: build_dependencies
      name: "API"
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *build_dependencies
    - stage: build_dependencies
      name: "Auth"
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *build_dependencies
    - stage: build_dependencies
      name: "Base (with ghcjs-base-stub)"
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *build_dependencies
    - stage: build_dependencies
      name: "Compiler"
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *build_dependencies
    - stage: build_dependencies
      name: "Error Sanitizer"
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *build_dependencies
    - stage: build_dependencies
      name: "Game API"
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *build_dependencies
    - stage: build_dependencies
      name: "Game Server"
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *build_dependencies
    - stage: build_dependencies
      name: "Prediction"
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *build_dependencies
    - stage: build_dependencies
      name: "Server"
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *build_dependencies
    - stage: build_dependencies
      name: "Funblocks Client (with ghcjs-base-stub)"
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *build_dependencies
    - stage: build
      name: "root"
      env:
        - PACKAGE="."
        - JOB=1
      script: &build
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - travis_wait 30 stack build --fast $PACKAGE # --ghc-options="-dynamic"
    - stage: build
      name: "Account"
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *build
    - stage: build
      name: "API"
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *build
    - stage: build
      name: "Auth"
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *build
    - stage: build
      name: "Base (with ghcjs-base-stub)"
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *build
    - stage: build
      name: "Compiler"
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *build
    - stage: build
      name: "Error Sanitizer"
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *build
    - stage: build
      name: "Game API"
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *build
    - stage: build
      name: "Game Server"
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *build
    - stage: build
      name: "Prediction"
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *build
    - stage: build
      name: "Server"
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *build
    - stage: build
      name: "Funblocks Client (with ghcjs-base-stub)"
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *build
    # - stage: Test
    #   name: "root"
    #  env:
        # - PACKAGE="*"
        # - JOB=1
    #   script: *test
    - stage: test
      name: "Account"
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: &test
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - stack test --fast $PACKAGE
    - stage: test
      name: "API"
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *test
    - stage: test
      name: "Auth"
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *test
    - stage: test
      name: "Base (with ghcjs-base-stub)"
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *test
    # - stage: test
    #   name: "Compiler"
    #   env:
        # - PACKAGE="codeworld-compiler"
        # - JOB=1
    #   script: *test
    - stage: test
      name: "Error Sanitizer"
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *test
    - stage: test
      name: "Game API"
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *test
    - stage: test
      name: "Game Server"
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *test
    - stage: test
      name: "Prediction"
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *test
    - stage: test
      name: "Server"
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *test
    - stage: upgrade_stack
      name: "Upgrade Stack"
      name: "root"
	    arch: arm64
      env:
        - PACKAGE="."
        - JOB=1
      script: &upgrade_stack
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export DIR=~/.local/bin
        - if [ ! -d "$DIR" ]; then mkdir -p ~/.local/bin; fi
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - stack --version
        - travis_retry eval $"stack install --resolver lts-14.11 happy-1.19.9 alex-3.2.4 ; sleep 10"
    - stage: upgrade_stack
      name: "Account"
	    arch: arm64
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Auth"
	    arch: arm64
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Base (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Compiler"
	    arch: arm64
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Error Sanitizer"
	    arch: arm64
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Game API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Game Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Prediction"
	    arch: arm64
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *upgrade_stack
    - stage: upgrade_stack
      name: "Funblocks Client (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *upgrade_stack
    - stage: build_some_dependencies
      name: "Build some dependencies"
      name: "root"
	    arch: arm64
      env:
        - PACKAGE="."
        - JOB=1
      script: &build_some_dependencies
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - |
          travis_wait 30 stack build --fast \
            base-compat \
            base-compat-batteries \
            basement \
            cereal \
            colour \
            cryptonite \
            hashable \
            haskell-src-exts \
            lens \
            transformers \
            network \
            old-time \
            sqlite-simple
        - sudo fallocate -l 4G /swapfile
        - sudo chmod 600 /swapfile
        - sudo mkswap /swapfile
        - sudo swapon /swapfile
        - sudo sysctl vm.swappiness=90
        - travis_wait 30 stack build -j1 --fast jsaddle-dom
        - sudo swapoff -a
    - stage: build_some_dependencies
      name: "Account"
	    arch: arm64
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Auth"
	    arch: arm64
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Base (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Compiler"
	    arch: arm64
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Error Sanitizer"
	    arch: arm64
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Game API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Game Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Prediction"
	    arch: arm64
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *build_some_dependencies
    - stage: build_some_dependencies
      name: "Funblocks Client (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *build_some_dependencies
    - stage: build_dependencies
      name: "Build dependencies"
      name: "root"
	    arch: arm64
      env:
        - PACKAGE="."
        - JOB=1
      script: &build_dependencies
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10" # - stack clean --full
        - travis_wait 30 stack build --fast --dependencies-only
    - stage: build_dependencies
      name: "Account"
	    arch: arm64
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *build_dependencies
    - stage: build_dependencies
      name: "API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *build_dependencies
    - stage: build_dependencies
      name: "Auth"
	    arch: arm64
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *build_dependencies
    - stage: build_dependencies
      name: "Base (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *build_dependencies
    - stage: build_dependencies
      name: "Compiler"
	    arch: arm64
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *build_dependencies
    - stage: build_dependencies
      name: "Error Sanitizer"
	    arch: arm64
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *build_dependencies
    - stage: build_dependencies
      name: "Game API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *build_dependencies
    - stage: build_dependencies
      name: "Game Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *build_dependencies
    - stage: build_dependencies
      name: "Prediction"
	    arch: arm64
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *build_dependencies
    - stage: build_dependencies
      name: "Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *build_dependencies
    - stage: build_dependencies
      name: "Funblocks Client (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *build_dependencies
    - stage: build
      name: "root"
	    arch: arm64
      env:
        - PACKAGE="."
        - JOB=1
      script: &build
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - travis_wait 30 stack build --fast $PACKAGE # --ghc-options="-dynamic"
    - stage: build
      name: "Account"
	    arch: arm64
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: *build
    - stage: build
      name: "API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *build
    - stage: build
      name: "Auth"
	    arch: arm64
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *build
    - stage: build
      name: "Base (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *build
    - stage: build
      name: "Compiler"
	    arch: arm64
      env:
        - PACKAGE="codeworld-compiler"
        - JOB=6
      script: *build
    - stage: build
      name: "Error Sanitizer"
	    arch: arm64
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *build
    - stage: build
      name: "Game API"
      arch: arm64
	    env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *build
    - stage: build
      name: "Game Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *build
    - stage: build
      name: "Prediction"
	    arch: arm64
      env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *build
    - stage: build
      name: "Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *build
    - stage: build
      name: "Funblocks Client (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="funblocks-client"
        - JOB=12
      script: *build
    # - stage: Test
    #   name: "root"
    #  env:
        # - PACKAGE="*"
        # - JOB=1
    #   script: *test
    - stage: test
      name: "Account"
	    arch: arm64
      env:
        - PACKAGE="codeworld-account"
        - JOB=2
      script: &test
        - sleep $(((JOB - 1) * 20))
        - travis_retry eval $"sudo apt-get update ; sleep 10"
        - travis_retry eval $"sudo apt-get install --yes libgmp-dev haskell-stack ; sleep 10"
        - export PATH=$HOME/.local/bin:$PATH
        - travis_retry eval $"stack upgrade --binary-only ; sleep 10"
        - hash -r
        - travis_retry eval $"stack setup --reinstall ; sleep 10"
        - stack test --fast $PACKAGE
    - stage: test
      name: "API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-api"
        - JOB=3
      script: *test
    - stage: test
      name: "Auth"
	    arch: arm64
      env:
        - PACKAGE="codeworld-auth"
        - JOB=4
      script: *test
    - stage: test
      name: "Base (with ghcjs-base-stub)"
	    arch: arm64
      env:
        - PACKAGE="codeworld-base"
        - JOB=5
      script: *test
    # - stage: test
    #   name: "Compiler"
    #   env:
        # - PACKAGE="codeworld-compiler"
        # - JOB=1
    #   script: *test
    - stage: test
      name: "Error Sanitizer"
	    arch: arm64
      env:
        - PACKAGE="codeworld-error-sanitizer"
        - JOB=7
      script: *test
    - stage: test
      name: "Game API"
	    arch: arm64
      env:
        - PACKAGE="codeworld-game-api"
        - JOB=8
      script: *test
    - stage: test
      name: "Game Server"
      arch: arm64
	    env:
        - PACKAGE="codeworld-game-server"
        - JOB=9
      script: *test
    - stage: test
      name: "Prediction"
      arch: arm64
	    env:
        - PACKAGE="codeworld-prediction"
        - JOB=10
      script: *test
    - stage: test
      name: "Server"
	    arch: arm64
      env:
        - PACKAGE="codeworld-server"
        - JOB=11
      script: *test
